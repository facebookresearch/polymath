from abc import ABC, abstractmethod

class BaseErrorHandler(ABC):
    """
    Abstract base class for handling errors in LLM code generation.
    Defines the interface for error-aware prompting and recovery strategies.
    """

    @abstractmethod
    async def revise(self, code: str, error_details: str) -> bool:
        """
        Called when a generated code fails due to an error. Responsible for
        generating a corrective prompt and deciding whether the system
        should retry.

        Args:
            code (str): The faulty code generated by the LLM.
            error_details (str): The error message or output indicating failure.

        Returns:
            bool: True if the caller should retry generation, False otherwise.
        """
        pass

    @abstractmethod
    def on_failure(self) -> bool:
        """
        Updates internal state (e.g., temperature, retry count) on failure
        and determines whether another attempt should be made.

        Returns:
            bool: True if another retry is allowed, False otherwise.
        """
        pass

    @abstractmethod
    def reset(self) -> None:
        """
        Resets any internal state such as retry counters or temperature.
        This is typically called after a successful generation.
        """
        pass
