from abc import ABC

class PromptReviser(ABC):
    """
    Abstract base class for adaptive prompt revision strategies.
    A PromptReviser is responsible for improving the constraint prompt
    in response to errors or unsatisfactory solutions, typically in an
    iterative solve loop involving a language model.

    Concrete implementations of this class can define how to revise
    prompts based on model output, execution errors, or mismatched solutions.
    """

    @abstractmethod
    async def revise(self, constraints_prompt: str, code: str, error_details: str) -> str:
        """
        Generates a revised constraint prompt based on the previous prompt,
        the LLM-generated code, and any error details encountered during execution.

        Args:
            constraints_prompt (str): The previous constraint prompt sent to the LLM.
            code (str): The code generated by the LLM.
            error_details (str): Error messages or information about what failed.

        Returns:
            str: A revised constraint prompt intended to improve the LLM's next output.
        """
        ...

    @abstractmethod
    def compare(self, solution: Dict[str, Any], outcome: Optional[str]) -> Tuple[bool, str]:
        """
        Compares the LLM's predicted solution with the ground truth.

        Args:
            solution (Dict[str, Any]): The expected correct solution.
            outcome (Optional[str]): The LLM's predicted output (e.g., a parsed solution).

        Returns:
            Tuple[bool, str]: A tuple containing a boolean indicating success,
                              and a string message describing the mismatch or result.
        """
        ...

    @abstractmethod
    def on_failure(self) -> bool:
        """
        Called after a failed solving attempt. Determines whether the system
        should continue retrying by revising the prompt further.

        Returns:
            bool: True if the system should continue revising and retrying; False otherwise.
        """
        ...

    @abstractmethod
    def reset(self) -> None:
        """
        Resets the reviserâ€™s internal state (e.g., retry counters, temperature, etc.).
        Should be called before starting a new solving session.
        """
        ...
