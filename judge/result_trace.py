# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.

from dataclasses import dataclass, field
from typing import Any, Optional

from inference.chat_completion import Message


@dataclass
class ResultTrace:
    """
    Full result information of an SMT-enabled LogicAgent invocation. Includes
    the solution output as well as debug information.
    """

    # Unique identifier for this trace, usually a string or integer task ID from
    # a benchmark.
    id: Any

    # All messages sent to the inference client.
    messages: list[Message] = field(default_factory=list)

    # Python data structure representing problem solutions.
    python_data_structure: Optional[str] = None
    data_structure_time: float = 0.0
    # Python code generated by the LLM.
    python_code: Optional[str] = None

    # C or SMT constraints converted from Python code.
    solver_constraints: Optional[str] = None
    constraints_time: float = 0.0
    # Output of solver (currently CBMC).
    solver_output: Optional[str] = None

    # Exit code of solver.
    solver_exit_code: Optional[int] = None

    # Solution provided by solver.
    solution: Optional[str] = None
    solver_time: float = 0.0
    # Number of times we retried the Logic agent pipeline (e.g. due to syntax
    # errors)
    num_agent_retries: int = 0

    # Number of times Logic.py syntax errors were encountered.
    num_logic_py_syntax_errors: int = 0

    # Number of times we encountered a fatal solver error
    num_solver_errors: int = 0

    # Number of times we retried solving with amended constraints (e.g. UNSAT in
    # CBMC and asking model to fix constraints.)
    num_solver_retries: int = 0

    # Number of itmes a solver timeout was encountered
    num_solver_timeouts: int = 0
    
    libcst_time: float = 0.0
    format_time: float = 0.0
    result_time: float = 0.0
    
    revise_success: bool = False

    def __repr__(self):
        return f"ResultTrace(messages={repr(self.messages)}, python_code={repr(self.python_code)}), solver_constraints={repr(self.solver_constraints)}), solver_output={repr(self.solver_output)}), solver_exit_code={repr(self.solver_exit_code)}), solution={repr(self.solution)}, num_agent_retries={repr(self.num_agent_retries)}, num_logic_py_syntax_errors={repr(self.num_logic_py_syntax_errors)}, num_solver_errors={repr(self.num_solver_errors)}, num_solver_retries={repr(self.num_solver_retries)}, num_solver_timeouts={repr(self.num_solver_timeouts)})"
